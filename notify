--CONFIG
getgenv().webhook = "https://discord.com/api/webhooks/1412573439662755991/totZqF-N-QytqQxFKM4GirpDF4j1Hjjyiy_a-RXBUdnjtg-4MAfW-Ve0h054IyvH8WiG"
getgenv().websiteEndpoint = nil

-- Allowed place IDs
local allowedPlaceIds = {
    [96342491571673] = true, -- New Players Server
    [109983668079237] = true -- Normal
}

getgenv().TargetPetNames = {
    "Graipuss Medussi",
    "La Grande Combinasion", "Garama and Madundung", "Los Nooo My Hotspotsitos",
    "Pot Hotspot", "Nuclearo Dinossauro", "Chicleteira Bicicleteira", 
    "Los Combinasionas", "Dragon Cannelloni", "Strawberry Elephant",
    "La Supreme Combinasion", "Esok Sekolah", "Los Hotspotsitos",
    "Ketupat Kepat", "Spaghetti Tualetti", "Nooo My Hotspot",
    "Meowl", "To to to Sahur", "Los Chicleteiras",
    "Ketchuru and Musturu", "Money Money Puggy", "Tictac Sahur",
    "Quesadilla Crocodila", "Tacorita Bicicleta", "La Sahur Combinasion",
    "Las Sis", "Celularcini Viciosini", "Los Bros", "Tralaledon",
    "Los Tacoritas", "Los Primos", "La Spooky Grande", "Los 67",
    "Los Mobilis", "La Extinct Grande", "Mariachi Corazoni", "67",
    "Mieteteira Bicicleteira", "La Secret Combinasion", 
    "Tang Tang Kelentang", "Burguro And Fryuro",
}

-- SERVICES
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

-- SERVER HOP CONFIG
getgenv().HopConfig = {
    MaxPlayersThreshold = 18, -- Se o servidor tiver mais players que isso, faz hop
    HopDelay = 5, -- Delay entre tentativas de hop (segundos)
    MaxHopAttempts = 10 -- M√°ximo de tentativas de hop
}

local hopAttempts = 0

-- PRIVATE SERVER CHECK (works for VIP + Reserved)
local function isPrivateServer()
    return (game.PrivateServerId and game.PrivateServerId ~= "")
        or (game.VIPServerId and game.VIPServerId ~= "")
end

local function buildJoinLink(placeId, jobId)
    return string.format(
        "https://chillihub1.github.io/chillihub-joiner/?placeId=%d&gameInstanceId=%s",
        placeId,
        jobId
    )
end

-- SERVER HOP FUNCTION
local function serverHop()
    local placeId = game.PlaceId
    local servers = {}
    local page = ""

    -- Busca servidores dispon√≠veis
    for _ = 1, getgenv().HopConfig.MaxHopAttempts do
        local success, result = pcall(function()
            return game:GetService("HttpService"):JSONDecode(
                game:HttpGet("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Desc&limit=100" .. page)
            )
        end)

        if success and result.data then
            for _, server in ipairs(result.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(servers, server)
                end
            end

            if result.nextPageCursor then
                page = "&cursor=" .. result.nextPageCursor
            else
                break
            end
        else
            break
        end
        wait(0.5)
    end

    -- Ordena servidores por popula√ß√£o (menos players primeiro)
    table.sort(servers, function(a, b)
        return a.playing < b.playing
    end)

    -- Tenta fazer teleport para um servidor com vaga
    for _, server in ipairs(servers) do
        if server.playing < getgenv().HopConfig.MaxPlayersThreshold then
            local success, error = pcall(function()
                TeleportService:TeleportToPlaceInstance(placeId, server.id, LocalPlayer)
            end)
            
            if success then
                print("üîÑ Teleportando para servidor com " .. server.playing .. "/" .. server.maxPlayers .. " players")
                return true
            end
        end
        wait(0.1)
    end

    return false
end

-- AUTO HOP CHECK
local function shouldHop()
    local currentPlayers = #Players:GetPlayers()
    local isFull = currentPlayers >= Players.MaxPlayers
    local isAlmostFull = currentPlayers >= getgenv().HopConfig.MaxPlayersThreshold
    
    return isFull or isAlmostFull
end

-- KICK CHECKS
if isPrivateServer() then
    LocalPlayer:Kick("Kicked because in private server")
    return
elseif not allowedPlaceIds[game.PlaceId] then
    local joinLink = buildJoinLink(game.PlaceId, game.JobId)
    LocalPlayer:Kick("Kicked because wrong game\nClick to join server:\n" .. joinLink)
    return
end

-- WEBHOOK SEND
local function sendWebhook(foundPets, jobId, isHop)
    local petCounts = {}
    for _, pet in ipairs(foundPets) do
        petCounts[pet] = (petCounts[pet] or 0) + 1
    end

    local formattedPets = {}
    for petName, count in pairs(petCounts) do
        table.insert(formattedPets, petName .. (count > 1 and " x" .. count or ""))
    end

    local joinLink = buildJoinLink(game.PlaceId, jobId)
    
    local title, color, description
    if isHop then
        title = "üîÑ Server Hop Executed"
        color = 16753920
        description = "**Servidor estava cheio/cheiando**\n**Novo Job ID:** " .. jobId
    else
        title = "üêæ Pet(s) Found!"
        color = 65280
        description = "**Pet(s):**\n" .. table.concat(formattedPets, "\n")
    end

    local embedData = {
        username = "Clufin Notify Free",
        embeds = { {
            title = title,
            description = description,
            color = color,
            fields = {
                {
                    name = "Players",
                    value = string.format("%d/%d", #Players:GetPlayers(), Players.MaxPlayers),
                    inline = true
                },
                {
                    name = "Job ID",
                    value = jobId,
                    inline = true
                },
                {
                    name = "Join Link",
                    value = string.format("[Click to join server](%s)", joinLink),
                    inline = false
                }
            },
            footer = { text = "Free Notify" },
            timestamp = DateTime.now():ToIsoDate()
        } }
    }

    local jsonData = HttpService:JSONEncode(embedData)
    local req = http_request or request or (syn and syn.request)
    if req then
        local success, err = pcall(function()
            req({
                Url = getgenv().webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        end)
        if success then
            print("‚úÖ Webhook sent")
        else
            warn("‚ùå Webhook failed:", err)
        end
    else
        warn("‚ùå No HTTP request function available")
    end
end

-- PET CHECK
local function checkForPets()
    local found = {}
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local nameLower = string.lower(obj.Name)
            for _, target in pairs(getgenv().TargetPetNames) do
                if string.find(nameLower, string.lower(target)) then
                    table.insert(found, obj.Name)
                    break
                end
            end
        end
    end
    return found
end

-- SERVER HOP HANDLER
local function handleServerHop()
    if hopAttempts >= getgenv().HopConfig.MaxHopAttempts then
        print("‚ùå M√°ximo de tentativas de hop atingido")
        LocalPlayer:Kick("Max hop attempts reached")
        return
    end

    hopAttempts = hopAttempts + 1
    print("üîÑ Tentando server hop... (" .. hopAttempts .. "/" .. getgenv().HopConfig.MaxHopAttempts .. ")")
    
    local success = serverHop()
    if success then
        sendWebhook({}, game.JobId, true)
    else
        print("‚ùå Falha no server hop, tentando novamente em " .. getgenv().HopConfig.HopDelay .. " segundos")
        wait(getgenv().HopConfig.HopDelay)
        handleServerHop()
    end
end

-- MAIN LOOP
task.spawn(function()
    while true do
        -- Verifica se precisa fazer server hop
        if shouldHop() then
            print("üö´ Servidor cheio/cheiando, iniciando server hop...")
            handleServerHop()
            break -- Para o loop atual, novo loop come√ßar√° no novo servidor
        end
        
        -- Verifica pets
        local petsFound = checkForPets()
        if #petsFound > 0 then
            print("‚úÖ Pets found:", table.concat(petsFound, ", "))
            sendWebhook(petsFound, game.JobId, false)
        else
            print("üîç No pets found")
        end
        
        task.wait(15)
    end
end)

-- CONEX√ÉO PERDIDA (fallback)
LocalPlayer.OnTeleport:Connect(function(state)
    if state == Enum.TeleportState.Failed then
        print("‚ùå Teleporte falhou, tentando novamente...")
        wait(3)
        handleServerHop()
    end
end)

print("‚úÖ Script carregado! Server Hop ativado.")
print("üìä Configura√ß√£o: Hop se servidor > " .. getgenv().HopConfig.MaxPlayersThreshold .. " players")
