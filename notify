--CONFIG
getgenv().webhook = "https://discord.com/api/webhooks/1412573439662755991/totZqF-N-QytqQxFKM4GirpDF4j1Hjjyiy_a-RXBUdnjtg-4MAfW-Ve0h054IyvH8WiG"
getgenv().websiteEndpoint = nil
getgenv().serverHopDelay = 1 -- Tempo em segundos antes de dar hop
getgenv().minPetValue = 1000000 -- Valor mínimo do pet (1M)

-- Allowed place IDs
local allowedPlaceIds = {
    [96342491571673] = true, -- New Players Server
    [109983668079237] = true -- Normal
}

-- SERVICES
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

-- PRIVATE SERVER CHECK (works for VIP + Reserved)
local function isPrivateServer()
    return (game.PrivateServerId and game.PrivateServerId ~= "")
        or (game.VIPServerId and game.VIPServerId ~= "")
end

local function buildJoinLink(placeId, jobId)
    return string.format(
        "https://chillihub1.github.io/chillihub-joiner/?placeId=%d&gameInstanceId=%s",
        placeId,
        jobId
    )
end

-- KICK CHECKS
if isPrivateServer() then
    LocalPlayer:Kick("Kicked because in private server")
    return
elseif not allowedPlaceIds[game.PlaceId] then
    local joinLink = buildJoinLink(game.PlaceId, game.JobId)
    LocalPlayer:Kick("Kicked because wrong game\nClick to join server:\n" .. joinLink)
    return
end

-- FORMAT NUMBER
local function formatNumber(num)
    if num >= 1000000000 then
        return string.format("%.2fB", num / 1000000000)
    elseif num >= 1000000 then
        return string.format("%.2fM", num / 1000000)
    elseif num >= 1000 then
        return string.format("%.2fK", num / 1000)
    else
        return tostring(num)
    end
end

-- SERVER HOP FUNCTION
local function serverHop()
    print("🔄 Iniciando server hop...")
    
    local success, result = pcall(function()
        local servers = HttpService:JSONDecode(game:HttpGet(
            "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        ))
        
        if servers and servers.data then
            local validServers = {}
            
            -- Filtra servidores (ignora o atual e servidores cheios)
            for _, server in pairs(servers.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(validServers, server)
                end
            end
            
            if #validServers > 0 then
                -- Escolhe um servidor aleatório
                local randomServer = validServers[math.random(1, #validServers)]
                print("✈️ Teleportando para servidor com " .. randomServer.playing .. "/" .. randomServer.maxPlayers .. " jogadores")
                
                TeleportService:TeleportToPlaceInstance(
                    game.PlaceId,
                    randomServer.id,
                    LocalPlayer
                )
            else
                print("⚠️ Nenhum servidor disponível, tentando teleporte normal...")
                TeleportService:Teleport(game.PlaceId, LocalPlayer)
            end
        end
    end)
    
    if not success then
        warn("❌ Erro no server hop:", result)
        -- Fallback: teleporte simples
        pcall(function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end)
    end
end

-- CHECK IF SERVER IS FULL
local function isServerFull()
    local currentPlayers = #Players:GetPlayers()
    local maxPlayers = Players.MaxPlayers
    return currentPlayers >= maxPlayers
end

-- GET PET NAME (procura o nome real do pet)
local function getPetName(petModel)
    -- Tenta encontrar o nome real do pet
    local petName = nil
    
    -- Método 1: Procura em Configuration
    local config = petModel:FindFirstChild("Configuration")
    if config then
        local nameObj = config:FindFirstChild("PetName") or config:FindFirstChild("Name") or config:FindFirstChild("DisplayName")
        if nameObj and nameObj:IsA("StringValue") then
            petName = nameObj.Value
        end
    end
    
    -- Método 2: Procura diretamente no model
    if not petName then
        local nameObj = petModel:FindFirstChild("PetName") or petModel:FindFirstChild("DisplayName")
        if nameObj and nameObj:IsA("StringValue") then
            petName = nameObj.Value
        end
    end
    
    -- Método 3: Procura em Attributes
    if not petName then
        petName = petModel:GetAttribute("PetName") or petModel:GetAttribute("Name") or petModel:GetAttribute("DisplayName")
    end
    
    -- Método 4: Procura por BillboardGui ou TextLabel
    if not petName then
        for _, descendant in pairs(petModel:GetDescendants()) do
            if descendant:IsA("BillboardGui") or descendant:IsA("SurfaceGui") then
                local textLabel = descendant:FindFirstChildOfClass("TextLabel")
                if textLabel and textLabel.Text ~= "" then
                    petName = textLabel.Text
                    break
                end
            end
        end
    end
    
    -- Se não encontrou nada, usa o nome do Model (mas limpa se for GUID)
    if not petName then
        petName = petModel.Name
        -- Verifica se é um GUID (formato: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
        if string.match(petName, "%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x") then
            petName = "Unknown Pet"
        end
    end
    
    return petName
end

-- GET PET VALUE (procura no pet model por configurações de valor)
local function getPetValue(petModel)
    -- Tenta encontrar o valor do pet em diferentes localizações possíveis
    local value = nil
    
    -- Método 1: Procura por um valor em Configuration
    local config = petModel:FindFirstChild("Configuration")
    if config then
        local valueObj = config:FindFirstChild("Value") or config:FindFirstChild("Worth") or config:FindFirstChild("Price")
        if valueObj and (valueObj:IsA("NumberValue") or valueObj:IsA("IntValue")) then
            value = valueObj.Value
        end
    end
    
    -- Método 2: Procura diretamente no model
    if not value then
        local valueObj = petModel:FindFirstChild("Value") or petModel:FindFirstChild("Worth") or petModel:FindFirstChild("Price")
        if valueObj and (valueObj:IsA("NumberValue") or valueObj:IsA("IntValue")) then
            value = valueObj.Value
        end
    end
    
    -- Método 3: Procura em Attributes
    if not value then
        value = petModel:GetAttribute("Value") or petModel:GetAttribute("Worth") or petModel:GetAttribute("Price")
    end
    
    return value
end

-- WEBHOOK SEND
local function sendWebhook(foundPets, jobId)
    local formattedPets = {}
    local totalValue = 0
    
    for _, petData in ipairs(foundPets) do
        local petName = petData.name
        local petValue = petData.value
        totalValue = totalValue + petValue
        table.insert(formattedPets, string.format("%s - **%s**", petName, formatNumber(petValue)))
    end

    local joinLink = buildJoinLink(game.PlaceId, jobId)

    local embedData = {
        username = "Clufin & VNZ Notifier",
        embeds = { {
            title = "🎯 High Value Brainrots Found!",
            description = "**Brainrot(s) (1M+):**\n" .. table.concat(formattedPets, "\n") .. "\n\n**Total Value:** " .. formatNumber(totalValue),
            color = 65280,
            fields = {
                {
                    name = "Players",
                    value = string.format("%d/%d", #Players:GetPlayers(), Players.MaxPlayers),
                    inline = true
                },
                {
                    name = "Job ID",
                    value = jobId,
                    inline = true
                },
                {
                    name = "Join Link",
                    value = string.format("[Click to join server](%s)", joinLink),
                    inline = false
                }
            },
            footer = { text = "ClufinBOT" },
            timestamp = DateTime.now():ToIsoDate()
        } }
    }

    local jsonData = HttpService:JSONEncode(embedData)
    local req = http_request or request or (syn and syn.request)
    if req then
        local success, err = pcall(function()
            req({
                Url = getgenv().webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        end)
        if success then
            print("✅ Webhook sent")
        else
            warn("❌ Webhook failed:", err)
        end
    else
        warn("❌ No HTTP request function available")
    end
end

-- PET CHECK (verifica valor ao invés de nome)
local function checkForPets()
    local found = {}
    
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local petValue = getPetValue(obj)
            
            if petValue and petValue >= getgenv().minPetValue then
                local petName = getPetName(obj)
                table.insert(found, {
                    name = petName,
                    value = petValue
                })
                print("💎 Found valuable pet:", petName, "Value:", formatNumber(petValue))
            end
        end
    end
    
    return found
end

-- MAIN LOOP WITH SERVER HOP
task.spawn(function()
    -- Verifica se o servidor já está cheio ao entrar
    if isServerFull() then
        print("🚫 Servidor está cheio! Dando hop imediatamente...")
        task.wait(2)
        serverHop()
        return
    end
    
    local checkCount = 0
    local maxChecksBeforeHop = 1 -- Número de verificações antes de dar hop
    
    while true do
        -- Verifica se o servidor ficou cheio durante a execução
        if isServerFull() then
            print("🚫 Servidor ficou cheio! Dando hop...")
            task.wait(2)
            serverHop()
            return
        end
        
        local petsFound = checkForPets()
        
        if #petsFound > 0 then
            print("✅ High value pets found!")
            sendWebhook(petsFound, game.JobId)
            checkCount = 0 -- Reseta o contador quando encontra pets
        else
            checkCount = checkCount + 1
            print("🔍 No pets found (Check " .. checkCount .. "/" .. maxChecksBeforeHop .. ")")
            
            if checkCount >= maxChecksBeforeHop then
                print("⏭️ Nenhum pet encontrado após " .. maxChecksBeforeHop .. " verificações. Dando hop...")
                task.wait(2)
                serverHop()
                return -- Encerra o loop atual (será reiniciado no novo servidor)
            end
        end
        
        task.wait(getgenv().serverHopDelay)
    end
end)

print("🚀 Script iniciado! Procurando por brainrots com valor 1M+...")
