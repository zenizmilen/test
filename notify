--CONFIG
getgenv().webhook = "https://discord.com/api/webhooks/1412573439662755991/totZqF-N-QytqQxFKM4GirpDF4j1Hjjyiy_a-RXBUdnjtg-4MAfW-Ve0h054IyvH8WiG"
getgenv().websiteEndpoint = nil
getgenv().serverHopDelay = 5
getgenv().debugMode = true
getgenv().fullScanMode = true -- MODO DE AN√ÅLISE COMPLETA

-- Allowed place IDs
local allowedPlaceIds = {
    [96342491571673] = true,
    [109983668079237] = true
}

getgenv().TargetPetNames = {
    "Graipuss Medussi",
    "La Grande Combinasion", "Garama and Madundung", "Los Nooo My Hotspotsitos",
    "Pot Hotspot", "Nuclearo Dinossauro", "Chicleteira Bicicleteira", 
    "Los Combinasionas", "Dragon Cannelloni", "Strawberry Elephant",
    "La Supreme Combinasion", "Esok Sekolah", "Los Hotspotsitos",
    "Ketupat Kepat", "Spaghetti Tualetti", "Nooo My Hotspot",
    "Meowl", "To to to Sahur", "Los Chicleteiras",
    "Ketchuru and Musturu", "Money Money Puggy", "Tictac Sahur",
    "Quesadilla Crocodila", "Tacorita Bicicleta", "La Sahur Combinasion",
    "Las Sis", "Celularcini Viciosini", "Los Bros", "Tralaledon",
    "Los Tacoritas", "Los Primos", "La Spooky Grande", "Los 67",
    "Los Mobilis", "La Extinct Grande", "Mariachi Corazoni", "67",
    "Mieteteira Bicicleteira", "La Secret Combinasion", 
    "Tang Tang Kelentang", "Burguro And Fryuro"
}

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

local function isPrivateServer()
    return (game.PrivateServerId and game.PrivateServerId ~= "")
        or (game.VIPServerId and game.VIPServerId ~= "")
end

local function buildJoinLink(placeId, jobId)
    return string.format(
        "https://chillihub1.github.io/chillihub-joiner/?placeId=%d&gameInstanceId=%s",
        placeId, jobId
    )
end

if isPrivateServer() then
    LocalPlayer:Kick("Kicked because in private server")
    return
elseif not allowedPlaceIds[game.PlaceId] then
    local joinLink = buildJoinLink(game.PlaceId, game.JobId)
    LocalPlayer:Kick("Kicked because wrong game\nClick to join server:\n" .. joinLink)
    return
end

local function serverHop()
    print("üîÑ Iniciando server hop...")
    local success, result = pcall(function()
        local servers = HttpService:JSONDecode(game:HttpGet(
            "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        ))
        if servers and servers.data then
            local validServers = {}
            for _, server in pairs(servers.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(validServers, server)
                end
            end
            if #validServers > 0 then
                local randomServer = validServers[math.random(1, #validServers)]
                print("‚úàÔ∏è Teleportando para servidor com " .. randomServer.playing .. "/" .. randomServer.maxPlayers .. " jogadores")
                TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer.id, LocalPlayer)
            else
                print("‚ö†Ô∏è Nenhum servidor dispon√≠vel, tentando teleporte normal...")
                TeleportService:Teleport(game.PlaceId, LocalPlayer)
            end
        end
    end)
    if not success then
        warn("‚ùå Erro no server hop:", result)
        pcall(function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end)
    end
end

local function isUUID(str)
    return string.match(str, "^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$") ~= nil
end

local function sendWebhook(foundPets, jobId)
    local validPets = {}
    for _, pet in ipairs(foundPets) do
        if not isUUID(pet) then
            table.insert(validPets, pet)
        end
    end
    
    if #validPets == 0 then
        print("‚ùå Nenhum pet v√°lido para enviar")
        return
    end
    
    local petCounts = {}
    for _, pet in ipairs(validPets) do
        petCounts[pet] = (petCounts[pet] or 0) + 1
    end

    local formattedPets = {}
    for petName, count in pairs(petCounts) do
        table.insert(formattedPets, petName .. (count > 1 and " x" .. count or ""))
    end

    local joinLink = buildJoinLink(game.PlaceId, jobId)
    local embedData = {
        username = "Clufin & VNZ Notifier",
        embeds = { {
            title = "Brainrots Founds I Clufin & VNZ Notifier",
            description = "**Brainrot(s):**\n" .. table.concat(formattedPets, "\n"),
            color = 65280,
            fields = {
                { name = "Players", value = string.format("%d/%d", #Players:GetPlayers(), Players.MaxPlayers), inline = true },
                { name = "Job ID", value = jobId, inline = true },
                { name = "Join Link", value = string.format("[Click to join server](%s)", joinLink), inline = false }
            },
            footer = { text = "ClufinBOT" },
            timestamp = DateTime.now():ToIsoDate()
        } }
    }

    local jsonData = HttpService:JSONEncode(embedData)
    local req = http_request or request or (syn and syn.request)
    if req then
        local success, err = pcall(function()
            req({
                Url = getgenv().webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        end)
        if success then
            print("‚úÖ Webhook enviado com", #validPets, "pets")
        else
            warn("‚ùå Webhook falhou:", err)
        end
    end
end

-- AN√ÅLISE COMPLETA DA ESTRUTURA DO WORKSPACE
local function fullWorkspaceScan()
    print("\nüî¨ ===== AN√ÅLISE COMPLETA DO WORKSPACE =====")
    print("üìÇ Estrutura principal:")
    
    for _, obj in pairs(workspace:GetChildren()) do
        print(string.format("  ‚îú‚îÄ %s (%s) - %d filhos", obj.Name, obj.ClassName, #obj:GetChildren()))
        
        -- Mostra estrutura de pastas importantes
        if obj:IsA("Folder") or obj:IsA("Model") then
            for _, child in pairs(obj:GetChildren()) do
                if #child:GetChildren() > 0 then
                    print(string.format("    ‚îú‚îÄ %s (%s) - %d filhos", child.Name, child.ClassName, #child:GetChildren()))
                end
            end
        end
    end
    
    print("\nüîç Procurando por players e seus pets...")
    
    -- Verifica cada player no servidor
    for _, player in pairs(Players:GetPlayers()) do
        print(string.format("\nüë§ Player: %s", player.Name))
        
        if player.Character then
            print("  ‚îî‚îÄ Character encontrado")
            for _, obj in pairs(player.Character:GetDescendants()) do
                if obj:IsA("Model") or obj:IsA("Folder") then
                    print(string.format("    ‚îú‚îÄ %s (%s)", obj.Name, obj.ClassName))
                end
            end
        end
    end
    
    print("\n===== FIM DA AN√ÅLISE =====\n")
end

-- BUSCA INTELIGENTE
local function checkForPets()
    local found = {}
    local targetNamesLower = {}
    
    for _, target in pairs(getgenv().TargetPetNames) do
        table.insert(targetNamesLower, string.lower(target))
    end
    
    if getgenv().fullScanMode then
        fullWorkspaceScan()
        getgenv().fullScanMode = false -- Faz scan completo s√≥ uma vez
    end
    
    print("\nüîç ===== BUSCANDO PETS =====")
    
    -- Estrat√©gia 1: Busca em characters dos players
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            for _, obj in pairs(player.Character:GetDescendants()) do
                pcall(function()
                    for i, targetLower in ipairs(targetNamesLower) do
                        local objName = string.lower(obj.Name)
                        
                        if objName == targetLower or string.find(objName, targetLower, 1, true) then
                            if not isUUID(obj.Name) then
                                table.insert(found, getgenv().TargetPetNames[i])
                                print(string.format("‚úÖ Encontrado no character de %s: %s", player.Name, getgenv().TargetPetNames[i]))
                            end
                        end
                        
                        -- Verifica StringValues
                        if obj:IsA("StringValue") then
                            local value = string.lower(obj.Value or "")
                            if value == targetLower and not isUUID(obj.Value) then
                                table.insert(found, getgenv().TargetPetNames[i])
                                print(string.format("‚úÖ Encontrado via StringValue de %s: %s", player.Name, getgenv().TargetPetNames[i]))
                            end
                        end
                    end
                end)
            end
        end
    end
    
    -- Estrat√©gia 2: Busca em pastas comuns de pets
    local petFolderNames = {"Pets", "Pet", "EquippedPets", "ActivePets", "PlayerPets"}
    for _, folderName in ipairs(petFolderNames) do
        local folder = workspace:FindFirstChild(folderName, true)
        if folder then
            print(string.format("üìÅ Encontrada pasta: %s", folder:GetFullName()))
            for _, obj in pairs(folder:GetDescendants()) do
                pcall(function()
                    for i, targetLower in ipairs(targetNamesLower) do
                        local objName = string.lower(obj.Name)
                        if objName == targetLower and not isUUID(obj.Name) then
                            table.insert(found, getgenv().TargetPetNames[i])
                            print(string.format("‚úÖ Encontrado na pasta %s: %s", folderName, getgenv().TargetPetNames[i]))
                        end
                        
                        if obj:IsA("StringValue") then
                            local value = string.lower(obj.Value or "")
                            if value == targetLower and not isUUID(obj.Value) then
                                table.insert(found, getgenv().TargetPetNames[i])
                                print(string.format("‚úÖ Encontrado via StringValue em %s: %s", folderName, getgenv().TargetPetNames[i]))
                            end
                        end
                    end
                end)
            end
        end
    end
    
    -- Remove duplicatas
    local unique = {}
    local seen = {}
    for _, v in ipairs(found) do
        if not seen[v] then
            seen[v] = true
            table.insert(unique, v)
        end
    end
    
    print(string.format("üìä Total de pets √∫nicos: %d", #unique))
    print("===== FIM BUSCA =====\n")
    
    return unique
end

-- MAIN LOOP
task.spawn(function()
    print("‚è≥ Aguardando jogo carregar...")
    task.wait(8) -- Mais tempo para garantir que tudo carregou
    
    local checkCount = 0
    local maxChecksBeforeHop = 2
    
    while true do
        local petsFound = checkForPets()
        
        if #petsFound > 0 then
            print("‚úÖ PETS ENCONTRADOS:", table.concat(petsFound, ", "))
            sendWebhook(petsFound, game.JobId)
            checkCount = 0
        else
            checkCount = checkCount + 1
            print(string.format("‚ö†Ô∏è Nenhum pet encontrado (Tentativa %d/%d)", checkCount, maxChecksBeforeHop))
            
            if checkCount >= maxChecksBeforeHop then
                print("‚è≠Ô∏è Dando server hop...")
                task.wait(2)
                serverHop()
                return
            end
        end
        
        task.wait(getgenv().serverHopDelay)
    end
end)

print("üöÄ Script iniciado! Modo de an√°lise ativado...")
