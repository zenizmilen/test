--CONFIG
getgenv().webhook = "https://discord.com/api/webhooks/1412573439662755991/totZqF-N-QytqQxFKM4GirpDF4j1Hjjyiy_a-RXBUdnjtg-4MAfW-Ve0h054IyvH8WiG"
getgenv().websiteEndpoint = nil
getgenv().serverHopDelay = 5
getgenv().debugMode = true

-- Allowed place IDs
local allowedPlaceIds = {
    [96342491571673] = true,
    [109983668079237] = true
}

getgenv().TargetPetNames = {
    "Graipuss Medussi",
    "La Grande Combinasion", "Garama and Madundung", "Los Nooo My Hotspotsitos",
    "Pot Hotspot", "Nuclearo Dinossauro", "Chicleteira Bicicleteira", 
    "Los Combinasionas", "Dragon Cannelloni", "Strawberry Elephant",
    "La Supreme Combinasion", "Esok Sekolah", "Los Hotspotsitos",
    "Ketupat Kepat", "Spaghetti Tualetti", "Nooo My Hotspot",
    "Meowl", "To to to Sahur", "Los Chicleteiras",
    "Ketchuru and Musturu", "Money Money Puggy", "Tictac Sahur",
    "Quesadilla Crocodila", "Tacorita Bicicleta", "La Sahur Combinasion",
    "Las Sis", "Celularcini Viciosini", "Los Bros", "Tralaledon",
    "Los Tacoritas", "Los Primos", "La Spooky Grande", "Los 67",
    "Los Mobilis", "La Extinct Grande", "Mariachi Corazoni", "67",
    "Mieteteira Bicicleteira", "La Secret Combinasion", 
    "Tang Tang Kelentang", "Burguro And Fryuro"
}

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

local function isPrivateServer()
    return (game.PrivateServerId and game.PrivateServerId ~= "")
        or (game.VIPServerId and game.VIPServerId ~= "")
end

local function buildJoinLink(placeId, jobId)
    return string.format(
        "https://chillihub1.github.io/chillihub-joiner/?placeId=%d&gameInstanceId=%s",
        placeId, jobId
    )
end

if isPrivateServer() then
    LocalPlayer:Kick("Kicked because in private server")
    return
elseif not allowedPlaceIds[game.PlaceId] then
    local joinLink = buildJoinLink(game.PlaceId, game.JobId)
    LocalPlayer:Kick("Kicked because wrong game\nClick to join server:\n" .. joinLink)
    return
end

local function serverHop()
    print("🔄 Iniciando server hop...")
    local success, result = pcall(function()
        local servers = HttpService:JSONDecode(game:HttpGet(
            "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        ))
        if servers and servers.data then
            local validServers = {}
            for _, server in pairs(servers.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(validServers, server)
                end
            end
            if #validServers > 0 then
                local randomServer = validServers[math.random(1, #validServers)]
                print("✈️ Teleportando para servidor com " .. randomServer.playing .. "/" .. randomServer.maxPlayers .. " jogadores")
                TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer.id, LocalPlayer)
            else
                print("⚠️ Nenhum servidor disponível, tentando teleporte normal...")
                TeleportService:Teleport(game.PlaceId, LocalPlayer)
            end
        end
    end)
    if not success then
        warn("❌ Erro no server hop:", result)
        pcall(function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end)
    end
end

local function isUUID(str)
    return string.match(str, "^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$") ~= nil
end

local function sendWebhook(foundPets, jobId)
    local validPets = {}
    for _, pet in ipairs(foundPets) do
        if not isUUID(pet) then
            table.insert(validPets, pet)
        end
    end
    
    if #validPets == 0 then
        print("❌ Nenhum pet válido para enviar")
        return
    end
    
    local petCounts = {}
    for _, pet in ipairs(validPets) do
        petCounts[pet] = (petCounts[pet] or 0) + 1
    end

    local formattedPets = {}
    for petName, count in pairs(petCounts) do
        table.insert(formattedPets, petName .. (count > 1 and " x" .. count or ""))
    end

    local joinLink = buildJoinLink(game.PlaceId, jobId)
    local embedData = {
        username = "Clufin & VNZ Notifier",
        embeds = { {
            title = "Brainrots Founds I Clufin & VNZ Notifier",
            description = "**Brainrot(s):**\n" .. table.concat(formattedPets, "\n"),
            color = 65280,
            fields = {
                { name = "Players", value = string.format("%d/%d", #Players:GetPlayers(), Players.MaxPlayers), inline = true },
                { name = "Job ID", value = jobId, inline = true },
                { name = "Join Link", value = string.format("[Click to join server](%s)", joinLink), inline = false }
            },
            footer = { text = "ClufinBOT" },
            timestamp = DateTime.now():ToIsoDate()
        } }
    }

    local jsonData = HttpService:JSONEncode(embedData)
    local req = http_request or request or (syn and syn.request)
    if req then
        local success, err = pcall(function()
            req({
                Url = getgenv().webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        end)
        if success then
            print("✅ Webhook sent com", #validPets, "pets válidos")
        else
            warn("❌ Webhook failed:", err)
        end
    end
end

-- BUSCA APENAS NO WORKSPACE (pets spawned/equipados)
local function checkForPets()
    local found = {}
    local targetNamesLower = {}
    
    for _, target in pairs(getgenv().TargetPetNames) do
        table.insert(targetNamesLower, string.lower(target))
    end
    
    if getgenv().debugMode then
        print("\n🔍 ===== ESCANEANDO WORKSPACE (PETS REAIS) =====")
    end
    
    -- Busca APENAS no workspace (onde os pets spawned ficam)
    for _, obj in pairs(workspace:GetDescendants()) do
        pcall(function()
            -- Ignora objetos da UI que podem estar no workspace
            local fullName = obj:GetFullName()
            if string.find(fullName:lower(), "gui") or 
               string.find(fullName:lower(), "menu") or
               string.find(fullName:lower(), "ui") or
               string.find(fullName:lower(), "screen") then
                return
            end
            
            -- Verifica apenas Models, Parts e Configurations relevantes
            if obj:IsA("Model") or obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("Configuration") then
                
                -- Lista de propriedades para verificar
                local checks = {}
                
                -- Adiciona verificação do objeto principal
                table.insert(checks, {obj = obj, prop = "Name"})
                
                -- Se for Model ou tem Configuration, verifica valores internos
                if obj:IsA("Model") or obj:IsA("Configuration") then
                    for _, child in pairs(obj:GetChildren()) do
                        if child:IsA("StringValue") then
                            table.insert(checks, {obj = child, prop = "Name"})
                            table.insert(checks, {obj = child, prop = "Value"})
                        elseif child:IsA("Configuration") then
                            for _, subChild in pairs(child:GetChildren()) do
                                if subChild:IsA("StringValue") then
                                    table.insert(checks, {obj = subChild, prop = "Name"})
                                    table.insert(checks, {obj = subChild, prop = "Value"})
                                end
                            end
                        end
                    end
                end
                
                -- Verifica todas as propriedades coletadas
                for _, check in ipairs(checks) do
                    local success, value = pcall(function() return check.obj[check.prop] end)
                    if success and type(value) == "string" and value ~= "" and not isUUID(value) then
                        local valueLower = string.lower(value)
                        
                        for i, targetLower in ipairs(targetNamesLower) do
                            -- Match exato ou contém o nome completo
                            if valueLower == targetLower then
                                -- Verifica se o objeto tem PrimaryPart ou é visível (indicando que é um pet real)
                                local isRealPet = false
                                if obj:IsA("Model") then
                                    isRealPet = obj.PrimaryPart ~= nil or #obj:GetChildren() > 3
                                elseif obj:IsA("Part") or obj:IsA("MeshPart") then
                                    isRealPet = obj.Parent and obj.Parent:IsA("Model")
                                else
                                    isRealPet = true
                                end
                                
                                if isRealPet then
                                    table.insert(found, getgenv().TargetPetNames[i])
                                    if getgenv().debugMode then
                                        print(string.format("✅ PET REAL ENCONTRADO: '%s' em %s.%s (Path: %s)", 
                                            getgenv().TargetPetNames[i], check.obj.ClassName, check.prop, obj:GetFullName()))
                                    end
                                end
                                break
                            end
                        end
                    end
                end
            end
        end)
    end
    
    -- Remove duplicatas
    local unique = {}
    local seen = {}
    for _, v in ipairs(found) do
        if not seen[v] then
            seen[v] = true
            table.insert(unique, v)
        end
    end
    
    if getgenv().debugMode then
        print(string.format("📊 Pets REAIS encontrados: %d", #unique))
        if #unique > 0 then
            print("📝 Lista:", table.concat(unique, ", "))
        end
        print("===== FIM SCAN =====\n")
    end
    
    return unique
end

-- MAIN LOOP
task.spawn(function()
    print("⏳ Aguardando jogo carregar...")
    task.wait(5)
    
    local checkCount = 0
    local maxChecksBeforeHop = 2
    
    while true do
        local petsFound = checkForPets()
        
        if #petsFound > 0 then
            print("✅ Pets REAIS encontrados:", table.concat(petsFound, ", "))
            sendWebhook(petsFound, game.JobId)
            checkCount = 0
        else
            checkCount = checkCount + 1
            print(string.format("🔍 Nenhum pet real encontrado (Tentativa %d/%d)", checkCount, maxChecksBeforeHop))
            
            if checkCount >= maxChecksBeforeHop then
                print("⏭️ Server hop...")
                task.wait(2)
                serverHop()
                return
            end
        end
        
        task.wait(getgenv().serverHopDelay)
    end
end)

print("🚀 Script iniciado! Procurando pets REAIS no workspace...")
