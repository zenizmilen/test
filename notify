--CONFIG
getgenv().webhook = "https://discord.com/api/webhooks/1412573439662755991/totZqF-N-QytqQxFKM4GirpDF4j1Hjjyiy_a-RXBUdnjtg-4MAfW-Ve0h054IyvH8WiG"
getgenv().websiteEndpoint = nil
getgenv().serverHopDelay = 1 -- Tempo em segundos antes de dar hop se n√£o encontrar pets

-- Allowed place IDs
local allowedPlaceIds = {
    [96342491571673] = true, -- New Players Server
    [109983668079237] = true -- Normal
}

getgenv().TargetPetNames = {
    "Graipuss Medussi",
    "La Grande Combinasion", "Garama and Madundung", "Sammyni Spyderini",
    "Pot Hotspot",
    "Nuclearo Dinossauro",  
    "Chicleteira Bicicleteira", "Los Combinasionas", "Dragon Cannelloni",
    "Strawberry Elephant",
    "La Supreme Combinasion",
    "Esok Sekolah",
    "Los Hotspotsitos",
    "Ketupat Kepat",
    "Spaghetti Tualetti",
    "Nooo My Hotspot"
}

-- SERVICES
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

-- PRIVATE SERVER CHECK (works for VIP + Reserved)
local function isPrivateServer()
    return (game.PrivateServerId and game.PrivateServerId ~= "")
        or (game.VIPServerId and game.VIPServerId ~= "")
end

local function buildJoinLink(placeId, jobId)
    return string.format(
        "https://chillihub1.github.io/chillihub-joiner/?placeId=%d&gameInstanceId=%s",
        placeId,
        jobId
    )
end

-- KICK CHECKS
if isPrivateServer() then
    LocalPlayer:Kick("Kicked because in private server")
    return
elseif not allowedPlaceIds[game.PlaceId] then
    local joinLink = buildJoinLink(game.PlaceId, game.JobId)
    LocalPlayer:Kick("Kicked because wrong game\nClick to join server:\n" .. joinLink)
    return
end

-- SERVER HOP FUNCTION
local function serverHop()
    print("üîÑ Iniciando server hop...")
    
    local success, result = pcall(function()
        local servers = HttpService:JSONDecode(game:HttpGet(
            "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        ))
        
        if servers and servers.data then
            local validServers = {}
            
            -- Filtra servidores (ignora o atual e servidores cheios)
            for _, server in pairs(servers.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(validServers, server)
                end
            end
            
            if #validServers > 0 then
                -- Escolhe um servidor aleat√≥rio
                local randomServer = validServers[math.random(1, #validServers)]
                print("‚úàÔ∏è Teleportando para servidor com " .. randomServer.playing .. "/" .. randomServer.maxPlayers .. " jogadores")
                
                TeleportService:TeleportToPlaceInstance(
                    game.PlaceId,
                    randomServer.id,
                    LocalPlayer
                )
            else
                print("‚ö†Ô∏è Nenhum servidor dispon√≠vel, tentando teleporte normal...")
                TeleportService:Teleport(game.PlaceId, LocalPlayer)
            end
        end
    end)
    
    if not success then
        warn("‚ùå Erro no server hop:", result)
        -- Fallback: teleporte simples
        pcall(function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end)
    end
end

-- WEBHOOK SEND
local function sendWebhook(foundPets, jobId)
    local petCounts = {}
    for _, pet in ipairs(foundPets) do
        petCounts[pet] = (petCounts[pet] or 0) + 1
    end

    local formattedPets = {}
    for petName, count in pairs(petCounts) do
        table.insert(formattedPets, petName .. (count > 1 and " x" .. count or ""))
    end

    local joinLink = buildJoinLink(game.PlaceId, jobId)

    local embedData = {
        username = "Clufin & VNZ Notifier",
        embeds = { {
            title = "Brainrots Founds I Clufin & VNZ Notifier",
            description = "**Brainrot(s):**\n" .. table.concat(formattedPets, "\n"),
            color = 65280,
            fields = {
                {
                    name = "Players",
                    value = string.format("%d/%d", #Players:GetPlayers(), Players.MaxPlayers),
                    inline = true
                },
                {
                    name = "Job ID",
                    value = jobId,
                    inline = true
                },
                {
                    name = "Join Link",
                    value = string.format("[Click to join server](%s)", joinLink),
                    inline = false
                }
            },
            footer = { text = "ClufinBOT" },
            timestamp = DateTime.now():ToIsoDate()
        } }
    }

    local jsonData = HttpService:JSONEncode(embedData)
    local req = http_request or request or (syn and syn.request)
    if req then
        local success, err = pcall(function()
            req({
                Url = getgenv().webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        end)
        if success then
            print("‚úÖ Webhook sent")
        else
            warn("‚ùå Webhook failed:", err)
        end
    else
        warn("‚ùå No HTTP request function available")
    end
end

-- PET CHECK
local function checkForPets()
    local found = {}
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local nameLower = string.lower(obj.Name)
            for _, target in pairs(getgenv().TargetPetNames) do
                if string.find(nameLower, string.lower(target)) then
                    table.insert(found, obj.Name)
                    break
                end
            end
        end
    end
    return found
end

-- MAIN LOOP WITH SERVER HOP
task.spawn(function()
    local checkCount = 0
    local maxChecksBeforeHop = 1 -- N√∫mero de verifica√ß√µes antes de dar hop
    
    while true do
        local petsFound = checkForPets()
        
        if #petsFound > 0 then
            print("‚úÖ Pets found:", table.concat(petsFound, ", "))
            sendWebhook(petsFound, game.JobId)
            checkCount = 0 -- Reseta o contador quando encontra pets
        else
            checkCount = checkCount + 1
            print("üîç No pets found (Check " .. checkCount .. "/" .. maxChecksBeforeHop .. ")")
            
            if checkCount >= maxChecksBeforeHop then
                print("‚è≠Ô∏è Nenhum pet encontrado ap√≥s " .. maxChecksBeforeHop .. " verifica√ß√µes. Dando hop...")
                task.wait(2)
                serverHop()
                return -- Encerra o loop atual (ser√° reiniciado no novo servidor)
            end
        end
        
        task.wait(getgenv().serverHopDelay)
    end
end)

print("üöÄ Script iniciado! Procurando por brainrots...")
