--CONFIG
getgenv().webhook = "https://discord.com/api/webhooks/1412573439662755991/totZqF-N-QytqQxFKM4GirpDF4j1Hjjyiy_a-RXBUdnjtg-4MAfW-Ve0h054IyvH8WiG"
getgenv().websiteEndpoint = nil
getgenv().serverHopDelay = 5 -- Aumentado para dar tempo de carregar
getgenv().debugMode = true

-- Allowed place IDs
local allowedPlaceIds = {
    [96342491571673] = true,
    [109983668079237] = true
}

getgenv().TargetPetNames = {
    "Graipuss Medussi",
    "La Grande Combinasion", "Garama and Madundung", "Los Nooo My Hotspotsitos",
    "Pot Hotspot", "Nuclearo Dinossauro", "Chicleteira Bicicleteira", 
    "Los Combinasionas", "Dragon Cannelloni", "Strawberry Elephant",
    "La Supreme Combinasion", "Esok Sekolah", "Los Hotspotsitos",
    "Ketupat Kepat", "Spaghetti Tualetti", "Nooo My Hotspot",
    "Meowl", "To to to Sahur", "Los Chicleteiras",
    "Ketchuru and Musturu", "Money Money Puggy", "Tictac Sahur",
    "Quesadilla Crocodila", "Tacorita Bicicleta", "La Sahur Combinasion",
    "Las Sis", "Celularcini Viciosini", "Los Bros", "Tralaledon",
    "Los Tacoritas", "Los Primos", "La Spooky Grande", "Los 67",
    "Los Mobilis", "La Extinct Grande", "Mariachi Corazoni", "67",
    "Mieteteira Bicicleteira", "La Secret Combinasion", 
    "Tang Tang Kelentang", "Burguro And Fryuro"
}

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

local function isPrivateServer()
    return (game.PrivateServerId and game.PrivateServerId ~= "")
        or (game.VIPServerId and game.VIPServerId ~= "")
end

local function buildJoinLink(placeId, jobId)
    return string.format(
        "https://chillihub1.github.io/chillihub-joiner/?placeId=%d&gameInstanceId=%s",
        placeId, jobId
    )
end

if isPrivateServer() then
    LocalPlayer:Kick("Kicked because in private server")
    return
elseif not allowedPlaceIds[game.PlaceId] then
    local joinLink = buildJoinLink(game.PlaceId, game.JobId)
    LocalPlayer:Kick("Kicked because wrong game\nClick to join server:\n" .. joinLink)
    return
end

local function serverHop()
    print("🔄 Iniciando server hop...")
    local success, result = pcall(function()
        local servers = HttpService:JSONDecode(game:HttpGet(
            "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        ))
        if servers and servers.data then
            local validServers = {}
            for _, server in pairs(servers.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(validServers, server)
                end
            end
            if #validServers > 0 then
                local randomServer = validServers[math.random(1, #validServers)]
                print("✈️ Teleportando para servidor com " .. randomServer.playing .. "/" .. randomServer.maxPlayers .. " jogadores")
                TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer.id, LocalPlayer)
            else
                print("⚠️ Nenhum servidor disponível, tentando teleporte normal...")
                TeleportService:Teleport(game.PlaceId, LocalPlayer)
            end
        end
    end)
    if not success then
        warn("❌ Erro no server hop:", result)
        pcall(function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end)
    end
end

-- Função para verificar se é um UUID (GUID)
local function isUUID(str)
    return string.match(str, "^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$") ~= nil
end

local function sendWebhook(foundPets, jobId)
    -- Remove UUIDs da lista
    local validPets = {}
    for _, pet in ipairs(foundPets) do
        if not isUUID(pet) then
            table.insert(validPets, pet)
        else
            if getgenv().debugMode then
                warn("⚠️ Ignorando UUID:", pet)
            end
        end
    end
    
    if #validPets == 0 then
        print("❌ Nenhum pet válido para enviar (só UUIDs encontrados)")
        return
    end
    
    local petCounts = {}
    for _, pet in ipairs(validPets) do
        petCounts[pet] = (petCounts[pet] or 0) + 1
    end

    local formattedPets = {}
    for petName, count in pairs(petCounts) do
        table.insert(formattedPets, petName .. (count > 1 and " x" .. count or ""))
    end

    local joinLink = buildJoinLink(game.PlaceId, jobId)
    local embedData = {
        username = "Clufin & VNZ Notifier",
        embeds = { {
            title = "Brainrots Founds I Clufin & VNZ Notifier",
            description = "**Brainrot(s):**\n" .. table.concat(formattedPets, "\n"),
            color = 65280,
            fields = {
                { name = "Players", value = string.format("%d/%d", #Players:GetPlayers(), Players.MaxPlayers), inline = true },
                { name = "Job ID", value = jobId, inline = true },
                { name = "Join Link", value = string.format("[Click to join server](%s)", joinLink), inline = false }
            },
            footer = { text = "ClufinBOT" },
            timestamp = DateTime.now():ToIsoDate()
        } }
    }

    local jsonData = HttpService:JSONEncode(embedData)
    local req = http_request or request or (syn and syn.request)
    if req then
        local success, err = pcall(function()
            req({
                Url = getgenv().webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        end)
        if success then
            print("✅ Webhook sent com", #validPets, "pets válidos")
        else
            warn("❌ Webhook failed:", err)
        end
    else
        warn("❌ No HTTP request function available")
    end
end

-- BUSCA MELHORADA - Procura em TODOS os objetos possíveis
local function deepSearch(parent, targetNamesLower, originalNames, found)
    for _, obj in pairs(parent:GetChildren()) do
        pcall(function()
            -- Verifica todas as propriedades possíveis
            local propsToCheck = {
                {prop = "Name", obj = obj},
                {prop = "Value", obj = obj},
                {prop = "Text", obj = obj},
                {prop = "Title", obj = obj},
                {prop = "DisplayName", obj = obj}
            }
            
            -- Se for Configuration, verifica valores dentro dele
            if obj:IsA("Configuration") then
                for _, child in pairs(obj:GetChildren()) do
                    if child:IsA("StringValue") or child:IsA("ObjectValue") then
                        table.insert(propsToCheck, {prop = "Value", obj = child})
                        table.insert(propsToCheck, {prop = "Name", obj = child})
                    end
                end
            end
            
            for _, check in ipairs(propsToCheck) do
                local success, value = pcall(function() return check.obj[check.prop] end)
                if success and type(value) == "string" and value ~= "" then
                    local valueLower = string.lower(value)
                    
                    for i, targetLower in ipairs(targetNamesLower) do
                        if valueLower == targetLower or string.find(valueLower, targetLower, 1, true) then
                            if not isUUID(value) then
                                table.insert(found, originalNames[i])
                                if getgenv().debugMode then
                                    print(string.format("✅ ENCONTRADO: '%s' em %s.%s = '%s' (Path: %s)", 
                                        originalNames[i], check.obj.ClassName, check.prop, value, check.obj:GetFullName()))
                                end
                            end
                        end
                    end
                end
            end
            
            -- Continua a busca recursiva
            deepSearch(obj, targetNamesLower, originalNames, found)
        end)
    end
end

local function checkForPets()
    local found = {}
    local targetNamesLower = {}
    
    for _, target in pairs(getgenv().TargetPetNames) do
        table.insert(targetNamesLower, string.lower(target))
    end
    
    if getgenv().debugMode then
        print("\n🔍 ===== ESCANEANDO SERVIDOR =====")
    end
    
    -- Busca em todos os lugares possíveis
    local searchRoots = {
        workspace,
        game:GetService("ReplicatedStorage"),
        LocalPlayer
    }
    
    if LocalPlayer.Character then
        table.insert(searchRoots, LocalPlayer.Character)
    end
    if LocalPlayer.PlayerGui then
        table.insert(searchRoots, LocalPlayer.PlayerGui)
    end
    if LocalPlayer.Backpack then
        table.insert(searchRoots, LocalPlayer.Backpack)
    end
    
    for _, root in ipairs(searchRoots) do
        if root then
            if getgenv().debugMode then
                print("📂 Escaneando:", root.Name)
            end
            deepSearch(root, targetNamesLower, getgenv().TargetPetNames, found)
        end
    end
    
    -- Remove duplicatas
    local unique = {}
    local seen = {}
    for _, v in ipairs(found) do
        if not seen[v] then
            seen[v] = true
            table.insert(unique, v)
        end
    end
    
    if getgenv().debugMode then
        print(string.format("📊 Resultado: %d pets encontrados", #unique))
        print("===== FIM SCAN =====\n")
    end
    
    return unique
end

-- MAIN LOOP
task.spawn(function()
    -- Aguarda o jogo carregar completamente
    print("⏳ Aguardando jogo carregar...")
    task.wait(5)
    
    local checkCount = 0
    local maxChecksBeforeHop = 3 -- Aumentado para 3 verificações
    
    while true do
        local petsFound = checkForPets()
        
        if #petsFound > 0 then
            print("✅ Pets válidos encontrados:", table.concat(petsFound, ", "))
            sendWebhook(petsFound, game.JobId)
            checkCount = 0
        else
            checkCount = checkCount + 1
            print(string.format("🔍 Nenhum pet encontrado (Tentativa %d/%d)", checkCount, maxChecksBeforeHop))
            
            if checkCount >= maxChecksBeforeHop then
                print("⏭️ Nenhum pet após " .. maxChecksBeforeHop .. " verificações. Server hop...")
                task.wait(2)
                serverHop()
                return
            end
        end
        
        task.wait(getgenv().serverHopDelay)
    end
end)

print("🚀 Script iniciado! Aguardando carregamento...")
